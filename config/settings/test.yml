# These settings are merged into config/settings.yml

# - these test settings may use small instances that cannot support large
#   application loads
# - these test settings may not be fault tolerant
# - these settings may consolidate services on single nodes that should be replicated
#   on multiple nodes in different availability zones for production fault tolerance

# IMPORTANT - Get an AWS Key Pair from the AWS EC2 console and use the name of that key
#             in the `key_name` field for the instance default settings.

# IMPORTANT - Find an AMI image_id and set it, ensure the OS on that AMI matches the
#             value in `Distributor ID:`, which can be found from the
#             `lsb_release -a`.  This test setting is using an Ubuntu AMI.
#             This can make a difference for package installations.
#
# It might be possible to dynamically detect the OS, e.g.
# https://unix.stackexchange.com/questions/6345/how-can-i-get-distribution-name-and-version-number-in-a-simple-shell-script


aws:

  instance_default_test: &TestDefault
    region: us-west-2
    image_id: ami-6e1a0117  # Ubuntu
    distrib_id: Ubuntu
    min_count: 1
    max_count: 1
    instance_type: t2.micro
    availability_zone: us-west-2a
    security_groups:
      - test_ssh_security_group
    key_name: dweber-consulting-test
    tag_name: test_default
    tag_group: test_nodes
    tag_manager: dlweber
    tag_service:
    tag_stage: test

  # ---
  # Zookeeper Nodes
  # - note definition and use of defaults: ZookeeperDefaults
  # - it's important that each instance has 'zookeeper' in the key and tag_name (case sensitive)

  test_zookeeper1: &ZookeeperDefaults
    <<: *TestDefault
    tag_service: zookeeper
    tag_group: test_zookeeper
    tag_name: test_zookeeper1
    availability_zone: us-west-2a  # need one node in each zone

  test_zookeeper2:
    <<: *ZookeeperDefaults
    tag_name: test_zookeeper2
    availability_zone: us-west-2b  # need one node in each zone

  test_zookeeper3:
    <<: *ZookeeperDefaults
    tag_name: test_zookeeper3
    availability_zone: us-west-2c  # need one node in each zone

  # ---
  # Kafka Nodes
  # - note definition and use of defaults: KafkaDefaults
  # - it's important that each instance has 'kafka' in the key and tag_name (case sensitive)

  test_kafka1: &KafkaDefaults
    <<: *TestDefault
    tag_service: kafka
    tag_group: test_kafka
    tag_name: test_kafka1
    availability_zone: us-west-2a  # need one node in each zone

  test_kafka2:
    <<: *KafkaDefaults
    tag_name: test_kafka2
    availability_zone: us-west-2b  # need one node in each zone

  test_kafka3:
    <<: *KafkaDefaults
    tag_name: test_kafka3
    availability_zone: us-west-2c  # need one node in each zone

  # ---
  # Mesos Nodes
  # - note definition and use of defaults: MesosMasterDefaults, MesosAgentDefaults
  # - it's important that each instance has 'mesos' in the key and tag_name (case sensitive)

  test_mesos_master1: &MesosMasterDefaults
    <<: *TestDefault
    tag_service: mesos
    tag_group: test_mesos_master
    tag_name: test_mesos_master1
    availability_zone: us-west-2a  # need one node in each zone

  test_mesos_master2:
    <<: *MesosMasterDefaults
    tag_name: test_mesos_master2
    availability_zone: us-west-2b  # need one node in each zone

  test_mesos_master3:
    <<: *MesosMasterDefaults
    tag_name: test_mesos_master3
    availability_zone: us-west-2c  # need one node in each zone

  test_mesos_agent1: &MesosAgentDefaults
    <<: *TestDefault
    tag_service: mesos
    tag_group: test_mesos_agent
    tag_name: test_mesos_agent1
    availability_zone: us-west-2a  # need one node in each zone

  test_mesos_agent2:
    <<: *MesosAgentDefaults
    tag_name: test_mesos_agent2
    availability_zone: us-west-2b  # need one node in each zone

  test_mesos_agent3:
    <<: *MesosMasterDefaults
    tag_name: test_mesos_agent3
    availability_zone: us-west-2c  # need one node in each zone

  # ---
  # Security Groups
  # A 'Default VPC' can be found on the EC2 Dashboard

  test_security_group_defaults: &TestSecurityGroupDefault
    vpc_id: vpc-14d0be7c
    tag_group: test_security_groups
    tag_manager: dlweber
    tag_stage: test

  test_ssh_security_group:
    <<: *TestSecurityGroupDefault
    tag_name: test_ssh_security_group
    group_name: test_ssh_security_group
    description: 'SSH access'
    authorize_ingress:
      group_id:
      ip_permissions:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          ip_ranges:
            - cidr_ip: '0.0.0.0/0'

